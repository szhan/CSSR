// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// runCSSR
Rcpp::List runCSSR(const Rcpp::CharacterVector& alphabet, const Rcpp::List& data, const int& maxLength, const bool& chiSquare, const double& sigLevel);
RcppExport SEXP CSSR_runCSSR(SEXP alphabetSEXP, SEXP dataSEXP, SEXP maxLengthSEXP, SEXP chiSquareSEXP, SEXP sigLevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type alphabet(alphabetSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxLength(maxLengthSEXP);
    Rcpp::traits::input_parameter< const bool& >::type chiSquare(chiSquareSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigLevel(sigLevelSEXP);
    rcpp_result_gen = Rcpp::wrap(runCSSR(alphabet, data, maxLength, chiSquare, sigLevel));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello
List rcpp_hello();
RcppExport SEXP CSSR_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"CSSR_runCSSR", (DL_FUNC) &CSSR_runCSSR, 5},
    {"CSSR_rcpp_hello", (DL_FUNC) &CSSR_rcpp_hello, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_CSSR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
