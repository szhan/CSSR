// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// runCSSR
Rcpp::List runCSSR(const Rcpp::CharacterVector alphabet, const Rcpp::CharacterVector data, const int maxLength, const bool isChi, const double sigLevel, const Rcpp::CharacterVector outputPrefix);
RcppExport SEXP CSSR_runCSSR(SEXP alphabetSEXP, SEXP dataSEXP, SEXP maxLengthSEXP, SEXP isChiSEXP, SEXP sigLevelSEXP, SEXP outputPrefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type alphabet(alphabetSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type maxLength(maxLengthSEXP);
    Rcpp::traits::input_parameter< const bool >::type isChi(isChiSEXP);
    Rcpp::traits::input_parameter< const double >::type sigLevel(sigLevelSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type outputPrefix(outputPrefixSEXP);
    rcpp_result_gen = Rcpp::wrap(runCSSR(alphabet, data, maxLength, isChi, sigLevel, outputPrefix));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"CSSR_runCSSR", (DL_FUNC) &CSSR_runCSSR, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_CSSR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
